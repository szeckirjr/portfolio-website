{"version":3,"sources":["components/Home.tsx","components/About.tsx","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["getRandomInt","min","max","Math","ceil","floor","random","Home","useState","String","join","imgSrc","setImgSrc","randomColor","count","colors","setColors","charSet","split","h","bg","p","spacing","cursor","borderRadius","bgGradient","boxSize","src","onClick","color","size","characters","isPlaying","duration","speed","revealDuration","revealEasing","characterSet","isRound","icon","ChevronDown","height","About","justify","w","App","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8SAQA,SAASA,EAAaC,EAAaC,GAG/B,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,EAG1C,SAASM,IACpB,MAA8BC,mBAAS,CAAC,iBAAkBC,OAAOT,EAAa,EAAE,IAAK,QAAQU,KAAK,KAAlG,mBAAQC,EAAR,KAAgBC,EAAhB,KACA,EAA8BJ,mBAASK,IAAY,CAAEC,MAAO,KAA5D,mBAAQC,EAAR,KAAgBC,EAAhB,KAOGC,EAAyB,uEAAuEC,MAAM,IAEzG,OACI,qCACI,cAAC,IAAD,CAAQC,EAAE,QAAQC,GAAG,UAAUC,EAAE,OAAjC,SACI,eAAC,IAAD,CAAQC,QAAS,EAAjB,UACI,cAAC,IAAD,CAAOC,OAAO,UAAUC,aAAa,OAAOC,WAAY,CAAC,eAAeV,EAAO,GAAG,IAAIA,EAAO,GAAG,KAAKL,KAAK,IAAKgB,QAAQ,QAAQC,IAAKhB,EAAQiB,QAXxI,WAChBhB,EAAU,CAAC,iBAAkBH,OAAOT,EAAa,EAAE,IAAK,QAAQU,KAAK,KACrEM,EAAUH,IAAY,CAAEC,MAAO,QAUnB,cAAC,IAAD,CAASe,MAAM,WAAWC,KAAK,MAA/B,iCAGA,cAAC,IAAD,CAASD,MAAOd,EAAO,GAAvB,SACd,cAAC,eAAD,CACCgB,WAAW,sCACXC,WAAS,EACTC,SAAU,EACVC,MAAO,EACPC,eAAgB,GAChBC,aAAa,cACbC,aAAcpB,MAGhB,cAAC,IAAD,CACCqB,SAAO,EACP,aAAW,wBACXC,KAAM,cAACC,EAAA,EAAD,IACNV,KAAK,YAIC,cAAC,IAAD,CAAWW,OAAO,Y,aClDf,SAASC,IACpB,OACI,eAAC,IAAD,CAAQvB,EAAE,OAAOwB,QAAQ,eAAzB,UACI,cAAC,IAAD,oBACA,cAAC,IAAD,CAAMC,EAAE,OAAR,+OCWGC,MATf,WACE,OACE,eAAC,IAAD,CAAgBC,MAAOA,QAAvB,UACE,cAACvC,EAAD,IACA,cAACmC,EAAD,QCASK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YClH5B1B,M","file":"static/js/main.03ce64b8.chunk.js","sourcesContent":["import { ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Center, Heading, IconButton, Image, VStack } from \"@chakra-ui/react\";\nimport randomColor from \"randomcolor\";\nimport { useState } from \"react\";\nimport Particles from \"react-particles-js\";\nimport { RandomReveal } from \"react-random-reveal\";\nimport { CharactersRequired } from \"react-random-reveal/lib/types\";\n\nfunction getRandomInt(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default function Home(): JSX.Element {\n    const [ imgSrc, setImgSrc ] = useState(['memojis/memoji', String(getRandomInt(1,6)), '.png'].join(''));\n    const [ colors, setColors ] = useState(randomColor({ count: 2 }));\n\n    const handleClick = () => {\n        setImgSrc(['memojis/memoji', String(getRandomInt(1,6)), '.png'].join(''));\n        setColors(randomColor({ count: 2 }))\n    }\n\n\tconst charSet: Array<string> = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@%$#&*\".split('');\n\n    return (\n        <>\n            <Center h=\"100vh\" bg=\"#303030\" p=\"20px\">\n                <VStack spacing={8}>\n                    <Image cursor=\"pointer\" borderRadius=\"full\" bgGradient={['linear(to-b,',colors[0],',',colors[1],')'].join('')} boxSize=\"230px\" src={imgSrc} onClick={handleClick} />\n                    <Heading color=\"gray.200\" size=\"4xl\">\n\t\t\t\t\t\tHello, I am Eduardo\n                    </Heading>\n                    <Heading color={colors[0]}>\n\t\t\t\t\t\t<RandomReveal\n\t\t\t\t\t\t\tcharacters=\"Software Engineering student @ UVic\"\n\t\t\t\t\t\t\tisPlaying\n\t\t\t\t\t\t\tduration={2}\n\t\t\t\t\t\t\tspeed={2}\n\t\t\t\t\t\t\trevealDuration={0.9}\n\t\t\t\t\t\t\trevealEasing=\"easeOutQuad\"\n\t\t\t\t\t\t\tcharacterSet={charSet as CharactersRequired}\n\t\t\t\t\t\t/>\n                    </Heading>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tisRound\n\t\t\t\t\t\taria-label=\"Continue to next page\"\n\t\t\t\t\t\ticon={<ChevronDownIcon />}\n\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t/>\n                </VStack>\n            </Center>\n            <Particles height=\"10vh\" />\n        </>\n    );\n}","import { Heading, HStack, Text } from \"@chakra-ui/react\";\n\nexport default function About() {\n    return (\n        <HStack h=\"50vh\" justify=\"space-evenly\">\n            <Heading>About</Heading>\n            <Text w=\"50vw\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsam eum reiciendis blanditiis magnam eius, aliquam quam fugiat quo ipsum repudiandae quae quidem. Fuga ullam mollitia molestiae ducimus nesciunt quidem inventore.</Text>\n        </HStack>\n    );\n}","import React from 'react';\nimport {\n  ChakraProvider,\n  theme,\n} from '@chakra-ui/react';\nimport Home from './components/Home.tsx';\nimport About from './components/About.tsx';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Home />\n      <About />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
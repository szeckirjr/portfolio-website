{"version":3,"sources":["docs/FuncLib.tsx","components/Home.tsx","components/About.tsx","components/Menubar.tsx","docs/ExperienceData.tsx","components/experience/ExperienceModal.tsx","components/experience/WorkTimelineElement.tsx","components/Experience.tsx","components/contact/SocialMediaButton.tsx","components/Contact.tsx","docs/ProjectData.tsx","components/projects/CheckGitHubRepoButton.tsx","components/projects/ProjectModal.tsx","components/projects/ProjectCard.tsx","components/Projects.tsx","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["getRandomInt","min","max","Math","ceil","floor","random","Home","useState","process","String","join","imgSrc","setImgSrc","randomColor","count","colors","setColors","charSet","split","id","bg","p","h","minW","style","scrollSnapAlign","spacing","cursor","borderRadius","bgGradient","boxSize","onClick","src","color","size","characters","isPlaying","duration","speed","revealDuration","revealEasing","characterSet","About","parallaxController","useController","randCol","luminosity","tinycolor","getBrightness","w","pl","pr","pt","pb","align","zIndex","y","position","maxH","mb","onLoad","update","as","x","to","_hover","opacity","transition","textDecoration","Menubar","pageIcons","useMediaQuery","isLargeScreen","listOfButtons","map","title","toLowerCase","colorScheme","variant","leftIcon","icon","createButton","shadow","justify","coopExperienceData","subtitle","range","description","otherExperienceData","ExperienceModal","isOpen","onClose","experience","d","Fragment","WorkTimelineElement","useDisclosure","onOpen","className","contentStyle","background","contentArrowStyle","borderRight","date","iconStyle","onTimelineElementClick","flexGrow","fontWeight","fontSize","isRound","bgColor","filter","InfoOutline","Experience","timelineCoopExperience","timelineOtherExperience","SocialMediaButton","aria_label","href","target","textColor","Contact","projectData","short_description","github_url","tags","CheckGitHubRepoButton","repo_url","rightIcon","ProjectModal","project","ProjectCard","alpha","format","length","tagList","tag","m","indexOf","textAlign","maxW","wrap","justifyContent","Projects","listOfProjects","overflow","alignContent","App","basename","theme","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a4aed22.chunk.js","sourcesContent":["export function getRandomInt(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}","import { Center, Heading, HStack, Image, VStack } from \"@chakra-ui/react\";\nimport randomColor from \"randomcolor\";\nimport { useState } from \"react\";\nimport { RandomReveal } from \"react-random-reveal\";\nimport { CharactersRequired } from \"react-random-reveal/lib/types\";\nimport { getRandomInt } from \"../docs/FuncLib\";\n\nexport default function Home(): JSX.Element {\n    const [ imgSrc, setImgSrc ] = useState([process.env.PUBLIC_URL,'/memojis/memoji', String(getRandomInt(1,6)), '.png'].join(''));\n    const [ colors, setColors ] = useState(randomColor({ count: 2 }));\n\n    const handleClick = () => {\n        setImgSrc([process.env.PUBLIC_URL,'/memojis/memoji', String(getRandomInt(1,6)), '.png'].join(''));\n        setColors(randomColor({ count: 2 }))\n    }\n\n\tconst charSet: Array<string> = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@%$#&*\".split('');\n\n    return (\n        <>\n        <Center id=\"home\" bg=\"#303030\" p=\"20px\" h=\"100vh\" minW=\"100vw\" style={{scrollSnapAlign: \"start\"}}>\n            <HStack>\n                <VStack spacing={8}>\n                    <Image\n                        cursor=\"pointer\"\n                        borderRadius=\"full\"\n                        bgGradient={['linear(to-b,',colors[0],',',colors[1],')'].join('')}\n                        boxSize=\"230px\"\n                        onClick={handleClick}\n                        src={imgSrc}\n                    />\n                    <Heading id=\"home\" color=\"gray.200\" size=\"3xl\">\n                        <RandomReveal\n                            characters=\"Hello, I'm Eduardo\"\n                            isPlaying\n                            duration={1.3}\n                            speed={6}\n                            revealDuration={0.9}\n                            revealEasing=\"easeOutQuad\"\n                            characterSet={charSet as CharactersRequired}\n                        />\n                    </Heading>\n                    <Heading color={colors[1]}>\n                        <RandomReveal\n                            characters=\"Software Engineering student @ UVic\"\n                            isPlaying\n                            duration={2.3}\n                            speed={6}\n                            revealDuration={0.9}\n                            revealEasing=\"easeOutQuad\"\n                            characterSet={charSet as CharactersRequired}\n                        />\n                    </Heading>\n                </VStack>\n            </HStack>\n        </Center>\n        </>\n    );\n}","import { Heading, VStack, Image, Center, Box } from \"@chakra-ui/react\";\nimport randomColor from \"randomcolor\";\nimport { Link } from \"react-router-dom\";\nimport { Parallax, useController } from \"react-scroll-parallax\";\nimport tinycolor from \"tinycolor2\";\n\nexport default function About() {\n\n    const { parallaxController } = useController();\n\n    var randCol = randomColor({luminosity: \"bright\"})\n    while (tinycolor(randCol).getBrightness()<200){\n        randCol = randomColor({luminosity: \"bright\"})\n    }\n    return (\n        <Center\n            w=\"100vw\"\n            bg=\"#303030\"\n            color=\"white\"\n            pl={10}\n            pr={10}\n            pt={40}\n            pb={20}\n        >\n        <VStack\n            spacing={38}\n            align=\"flex-start\"\n            w=\"50vw\"\n            minW=\"300px\"\n        >\n            <Heading zIndex={2}  size=\"2xl\">About</Heading>\n            <Heading zIndex={2}  size=\"xl\">This is me:</Heading>\n            <Parallax y={[-40, 50]}>\n                <Image\n                    position=\"relative\"\n                    maxH=\"400px\"\n                    src={process.env.PUBLIC_URL+\"/babyself.JPG\"}\n                    mb={32}\n                    onLoad={() => parallaxController.update()}\n                />\n            </Parallax>\n            <Heading zIndex={2}  size=\"xl\">Ok this WAS me some years ago</Heading>\n            <Heading zIndex={2}  size=\"xl\">Nowadays I look more like this:</Heading>\n            <Parallax y={[20,-20]}>\n                <Image\n                    maxH=\"400px\"\n                    src={process.env.PUBLIC_URL+\"/currentself.JPG\"}\n                    onLoad={() => parallaxController.update()}\n                />\n            </Parallax>\n            <Heading zIndex={2}  size=\"xl\">I was born and raised in <Box as=\"span\" color={randCol}>Porto Alegre</Box>, a city in the southernmost state in Brazil.</Heading>\n            <Image\n                maxH=\"400px\"\n                src={process.env.PUBLIC_URL+\"/poamap.jpg\"}\n                onLoad={() => parallaxController.update()}\n            />\n            <Heading zIndex={2}  size=\"xl\"> In 2018, I moved to Victoria, B.C., to go to the <Box as=\"span\" color={randCol}>University of Victoria</Box></Heading>\n            <Parallax x={[-30,30]}>\n                <Image\n                    maxH=\"400px\"\n                    src={process.env.PUBLIC_URL+\"/uvicself.JPG\"}\n                    onLoad={() => parallaxController.update()}\n                />\n            </Parallax>\n            \n            <Heading zIndex={2}  size=\"xl\">\n                Now, I am currently entering my <Box as=\"span\" color={randCol}>4th year in Software Engineering</Box>\n                <br /><br />I have completed <Box as=\"span\" color={randCol}>two co-op terms</Box> so far and have gained experience with web development and data analysis.\n                <br /><br />If you want to hear more about it, check out my{' '}\n                <Link to=\"/experience\"><Box as=\"span\" _hover={{opacity: 0.5, transition: \"opacity 0.2s\"}} textDecoration=\"underline\" color={randCol}>experience page</Box>!</Link>\n            </Heading>\n        </VStack>\n        </Center>\n    );\n}\n","import { Button, Flex, IconButton, useMediaQuery } from \"@chakra-ui/react\";\nimport { Link } from 'react-router-dom';\nimport { HiHome } from \"react-icons/hi\"\nimport { BsFillPersonFill, BsBriefcaseFill, BsFolderFill } from \"react-icons/bs\"\nimport { AiFillPhone } from \"react-icons/ai\"\n\nexport default function Menubar(): JSX.Element {\n\n    type title = \"Home\" | \"About\" | \"Experience\" | \"Projects\" | \"Contact\";\n    const pages = [\"Home\", \"About\", \"Experience\", \"Projects\", \"Contact\"];\n    const pageIcons = {\n        \"Home\": <HiHome />,\n        \"About\": <BsFillPersonFill />,\n        \"Experience\": <BsBriefcaseFill />,\n        \"Projects\": <BsFolderFill />,\n        \"Contact\": <AiFillPhone />\n    }\n\n    const [isLargeScreen] = useMediaQuery(\"(min-width: 720px)\")\n\n    function createButton(title: title) {\n        return <Link to={\"/\"+title.toLowerCase()}>\n            {isLargeScreen ? \n                    <Button\n                    colorScheme=\"whiteAlpha\"\n                    color=\"white\"\n                    size=\"lg\"\n                    variant=\"ghost\"\n                    leftIcon={pageIcons[title]}\n                >\n                    {title}\n                </Button>\n            :\n            <IconButton\n                aria-label={title}\n                colorScheme=\"whiteAlpha\"\n                color=\"white\"\n                size=\"lg\"\n                variant=\"ghost\"\n                icon={pageIcons[title]}\n            />\n            }\n                \n            </Link>;\n    }\n\n    const listOfButtons: JSX.Element[] = pages.map((title) => createButton(title as title));\n\n    return (\n        <Flex shadow=\"xl\" p={3} position=\"fixed\" zIndex={4} w=\"100vw\" bg=\"#303030\" justify=\"space-evenly\">\n            {listOfButtons}\n        </Flex>\n    )\n}","import { RiGuideLine, RiMentalHealthLine, RiPaintBrushFill } from \"react-icons/ri\"\nimport { GiOpenBook } from \"react-icons/gi\"\n\nexport type Experience = {\n    title: string;\n    subtitle: string;\n    range: string;\n    description: string[];\n    color: string;\n    icon: JSX.Element;\n}\n\nexport const coopExperienceData: Experience[] = [\n    {\n        title: \"Software Engineering Intern\",\n        subtitle: \"Centre for Addiction and Mental Health (CAMH)\",\n        range: \"Sep. 2020 - Dec. 2020\",\n        description: [\n            \"For my first co-op, I worked at Centre for Addiction and Mental Health (CAMH), the largest mental health hospital in Canada. I worked entirely remotely due to the COVID-19 pandemic. There, I worked on developing an interactive web based application from scratch to better support the creation of health care plans in a health-specific data standard.\",\n            \"Worked with Python and Dash for the generation of interactive interfaces. The second version was made using HTML, CSS, and JavaScript. The application runs on a Node.js/Express.js server and it has a MongoDB database for care plan storage.\"\n        ],\n        color: \"#97266D\",\n        icon: <RiMentalHealthLine />\n    }\n]\n\nexport const otherExperienceData: Experience[] = [\n    {\n        title: \"Campus Tour Guide\",\n        subtitle: \"University of Victoria\",\n        range: \"Nov. 2019 - Present\",\n        description: [\n            \"Representing UVic as a Campus Tour Guide by showing the campus to prospective students and their families.\",\n            \"Acquired skills such as public speaking and interpersonal relations.\",\n        ],\n        color: \"#ffaf00\",\n        icon: <RiGuideLine />\n    },\n    {\n        title: \"Digitization Assistant\",\n        subtitle: \"Univeristy of Victoria - Libraries\",\n        range: \"Sep. 2019 - Apr. 2020\",\n        description: [\n            \"Scanning old BC Gazettes with the intent of uploading them into the Internet Archive.\",\n            \"Learned how to use new equipament/software very fast, while learning how to work on an office environment for hours a day.\"\n        ],\n        color: \"gray\",\n        icon: <GiOpenBook />\n    },\n    {\n        title: \"Student Painter\",\n        subtitle: \"Scholars Edge Painting\",\n        range: \"May. 2019 - Sep. 2019\",\n        description: [\n            \"Working as a student painter over the summer. Worked with clients (i.e. answering questions and handling any concerns they might have had) and worked outdoors. Also learned to be extremely flexible, since our time/location was usually given 30min before the job started.\"\n        ],\n        color: \"#ff6600\",\n        icon: <RiPaintBrushFill />\n    }\n]\n","import {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalCloseButton,\n    ModalBody,\n    Heading,\n    Text\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { Experience } from \"../../docs/ExperienceData\";\n\ntype Props = {\n    isOpen: boolean;\n    onClose: () => void;\n    experience: Experience;\n}\n\nexport default function ExperienceModal({isOpen, onClose, experience}: Props) {\n\n    const description = experience.description.map(d=><React.Fragment>{d}<br/><br /></React.Fragment>)\n\n    return (\n        <Modal\n            isOpen={isOpen}\n            onClose={onClose}\n            size=\"3xl\"\n        >\n            <ModalOverlay />\n            <ModalContent\n                bg=\"gray.50\"\n            >\n                <ModalHeader color=\"gray.900\">{experience.title}</ModalHeader>\n                <ModalCloseButton color=\"gray.900\" />\n                <ModalBody pb={6}>\n                    <Heading color=\"gray.900\" size=\"md\">{experience.subtitle}</Heading>\n                    <Text color=\"gray.900\">{experience.range}</Text>\n                    <br />\n                    <Text as=\"p\" color=\"gray.900\">{description}</Text>\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    )\n}","import { InfoOutlineIcon } from \"@chakra-ui/icons\";\nimport { Box, Heading, HStack, IconButton, Text, useDisclosure } from \"@chakra-ui/react\";\nimport { VerticalTimelineElement } from \"react-vertical-timeline-component\";\nimport { Experience } from \"../../docs/ExperienceData\";\nimport ExperienceModal from \"./ExperienceModal\";\n\nexport default function WorkTimelineElement({ title, subtitle, description, color, range, icon }: Experience){\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    return (\n        <VerticalTimelineElement\n            className=\"vertical-timeline-element--work\"\n            contentStyle={{ background: color, color: '#fff' }}\n            contentArrowStyle={{ borderRight: ('7px solid  '+color) }}\n            date={range}\n            iconStyle={{ background: color, color: '#fff' }}\n            icon={icon}\n            onTimelineElementClick={onOpen}\n            style={ {cursor:\"pointer\"} }\n        >\n            <HStack>\n                <Box flexGrow={10}>\n                    <Heading\n                        className=\"vertical-timeline-element-title\"\n                        as=\"h3\"\n                        fontWeight=\"bold\"\n                        size=\"md\"\n                    >{title}</Heading>\n                    <Text\n                        className=\"vertical-timeline-element-subtitle\"\n                        as=\"h4\"\n                        fontSize=\"1.25em\"\n                    >{subtitle}</Text>\n                </Box>\n                <IconButton\n                    isRound\n                    bgColor={color}\n                    filter=\"contrast(130%)\"\n                    aria-label=\"More info\"\n                    onClick={onOpen}\n                    icon={<InfoOutlineIcon />}\n                    shadow=\"lg\"\n                />\n            </HStack>\n            <ExperienceModal isOpen={isOpen} onClose={onClose} experience={{ title, subtitle, description, color, range, icon }} />\n        </VerticalTimelineElement>\n    );\n}","import { Box, Heading, VStack, Text } from \"@chakra-ui/react\";\nimport { VerticalTimeline }  from 'react-vertical-timeline-component';\nimport 'react-vertical-timeline-component/style.min.css';\nimport { coopExperienceData, otherExperienceData } from \"../docs/ExperienceData\";\nimport WorkTimelineElement from \"./experience/WorkTimelineElement\";\n\nexport default function Experience() {\n\n    const timelineCoopExperience = coopExperienceData.map((p) => <WorkTimelineElement {...p} /> );\n    const timelineOtherExperience = otherExperienceData.map(p => <WorkTimelineElement {...p} />);\n\n    return <VStack pl={10} pr={10} pt={40} pb={20} spacing={38} bg=\"#303030\">\n                <Text color=\"white\" fontSize=\"1.25em\">Click on any element to learn more about my role</Text>\n                <Heading color=\"gray.50\" id=\"coop-experience\">Co-Op Experience</Heading>\n                <Box w=\"100vw\">\n                    <VerticalTimeline>\n                        {timelineCoopExperience}\n                    </VerticalTimeline>\n                </Box>\n                <Heading color=\"gray.50\" id=\"other-experience\">Other Experience</Heading>\n                <Box w=\"100vw\">\n                    <VerticalTimeline>\n                        {timelineOtherExperience}\n                    </VerticalTimeline>\n                </Box>\n            </VStack>;\n}","import { IconButton } from \"@chakra-ui/react\";\nimport tinycolor from \"tinycolor2\";\n\ntype Props = {\n    aria_label: string;\n    bg: string;\n    icon: JSX.Element;\n    href: string;\n}\n\nexport default function SocialMediaButton({ aria_label, bg, icon, href }: Props){\n    return <IconButton\n                as=\"a\"\n                target=\"_blank\"\n                href={href}\n                aria-label=\"Open my Linkedin\"\n                bg={bg}\n                icon={icon}\n                size=\"lg\"\n                fontSize=\"30px\"\n                textColor={tinycolor(bg).getBrightness()>200 ? \"#282828\" : \"white\"}\n                boxSize=\"70px\"\n                isRound\n            />\n}","import { Center, HStack, VStack, Image } from \"@chakra-ui/react\";\nimport randomColor from \"randomcolor\";\nimport { useState } from \"react\";\nimport { FaLinkedinIn, FaSpotify } from \"react-icons/fa\";\nimport { ImGithub } from \"react-icons/im\"\nimport { MdEmail } from \"react-icons/md\"\nimport { SiGoodreads } from \"react-icons/si\"\nimport { getRandomInt } from \"../docs/FuncLib\";\nimport SocialMediaButton from \"./contact/SocialMediaButton\";\n\nexport default function Contact() {\n    const [ imgSrc, setImgSrc ] = useState([process.env.PUBLIC_URL,'/memojis/memoji', String(getRandomInt(1,6)), '.png'].join(''));\n    const [ colors, setColors ] = useState(randomColor({ count: 2 }));\n\n    const handleClick = () => {\n        setImgSrc([process.env.PUBLIC_URL,'/memojis/memoji', String(getRandomInt(1,6)), '.png'].join(''));\n        setColors(randomColor({ count: 2 }))\n    }\n\n    return (\n        <Center id=\"home\" bg=\"#303030\" p=\"20px\" h=\"100vh\" minW=\"100vw\" style={{scrollSnapAlign: \"start\"}}>\n            <HStack>\n                <VStack spacing={8}>\n                    <HStack spacing={10}>\n                        <SocialMediaButton\n                            aria_label=\"Open my Linkedin\"\n                            bg={colors[0]}\n                            icon={<FaLinkedinIn />}\n                            href=\"https://www.linkedin.com/in/eduardo-szeckir/\"\n                        />\n                        <SocialMediaButton\n                            aria_label=\"Open my GitHub\"\n                            bg={colors[0]}\n                            icon={<ImGithub />}\n                            href=\"https://github.com/szeckirjr\"\n                        />\n                        <SocialMediaButton\n                            aria_label=\"Send me an email\"\n                            bg={colors[0]}\n                            icon={<MdEmail />}\n                            href=\"mailto:eszeckirjr@gmail.com\"\n                        />\n                    </HStack>\n                    <Image\n                        cursor=\"pointer\"\n                        borderRadius=\"full\"\n                        bgGradient={['linear(to-b,',colors[0],',',colors[1],')'].join('')}\n                        boxSize=\"230px\"\n                        onClick={handleClick}\n                        src={imgSrc}\n                    />\n                    <HStack spacing={10}>\n                        <SocialMediaButton\n                            aria_label=\"Open my Goodreads\"\n                            bg={colors[1]}\n                            icon={<SiGoodreads />}\n                            href=\"https://www.goodreads.com/user/show/95379777-eduardo-szeckir\"\n                        />\n                        <SocialMediaButton\n                            aria_label=\"Open my Spotify\"\n                            bg={colors[1]}\n                            icon={<FaSpotify />}\n                            href=\"https://open.spotify.com/user/szeckirjr?si=d7a10eebae724c10\"\n                        />\n                    </HStack>\n                </VStack>\n            </HStack>\n        </Center>\n    )\n}","export type Project = {\n    title: string;\n    short_description: string;\n    description: string[];\n    github_url?: string;\n    tags: string[];\n}\n\nexport const projectData: Project[] = [\n    {\n        title:\"Keyword-Out-Of-Context (KWOC)\",\n        short_description:\"Generate an alphabetical list of the key words used in a text file, listing every instance of each word with its immediate context (line and line number).\",\n        description:[\n            \"This project was an assignment for my Software Development Methods class - SENG265.\",\n            \"The goal of this project was to code a program that can generate a concordance from a text file, which is an alphabetical list of the principal words used in a text file, listing every instance of each word with its immediate context (line and line number).\",\n            \"The hardest part about this project was resolving memory leak problems with C, but by using valgrind I was able to restore all bits of memory.\"\n        ],\n        github_url:\"https://github.com/szeckirjr/KWOCinC\",\n        tags:[\n            \"C\",\n            \"File input\",\n            \"valgrind\"\n        ]\n    },\n    {\n        title:\"VEX Robot\",\n        short_description:\"Program for a VEX Robot to navigate an arena using sensors and connect cable to beacon emitting infrared light.\",\n        description:[\n            \"This project was a team project for my second Design and Communication class - ENGR120.\",\n            \"The goal of this project was to design, build, and program a robot using a VEX Robotics Kit provided by the university. The robot would have to navigate within an arena, avoid its walls, and find a beacon emitting infrared light. When the beacon is found, the robot would approach it, connect a cable to it in some way, and then back away without getting the cable tangled.\",\n            \"As the programmer for my team, I had to learn/use RobotC to get values from sensors and make the robot move in the required way. The hardest part of the project was reading the values received by the infrared receptor, since sometimes the infrared signal would bounce off the walls of the arena.\"\n        ],\n        github_url:\"https://github.com/szeckirjr/VEXKitRobot\",\n        tags:[\n            \"C\",\n            \"RobotC\",\n            \"Design\",\n            \"Sensors\",\n            \"Electrical board\"\n        ]\n    },\n    {\n        title: \"HTML Portfolio Website\",\n        short_description: \"Portfolio website made from scratch using HTML, CSS, and JavaScript.\",\n        description: [\n            \"I have been meaning to code a website from scratch for a long time, so when I started applying for Co-Op jobs I thought it would be a great idea to make a portfolio one.\",\n            \"The website was coded entirely in HTML, CSS and JavaScript. The hardest part about this website was making it responsive for different sized screens. I had first coded all my pages without thinking about it, and would only later find out how bad it looked on my phone, but I was able to recode every page to make it responsive to all screen sizes.\"\n        ],\n        github_url: \"https://github.com/szeckirjr/PortfolioWebsite\",\n        tags:[\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"Responsive\"\n        ]\n    }\n]","import { Button } from \"@chakra-ui/react\"\nimport { AiFillGithub } from \"react-icons/ai\"\nimport { BsArrowUpRight } from \"react-icons/bs\"\n\ntype Props = {\n    repo_url?: string;\n}\n\nexport default function CheckGitHubRepoButton({repo_url}: Props){\n    return repo_url ? <Button\n        color=\"white\"\n        as=\"a\"\n        href={repo_url}\n        target=\"_blank\"\n        leftIcon={<AiFillGithub />}\n        rightIcon={<BsArrowUpRight />}\n        bg=\"#333\"\n        _hover={{\n            bg: \"#606060\"\n        }}\n    >\n        Check GitHub Repository\n    </Button> :\n    null\n}","import {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalCloseButton,\n    ModalBody,\n    Text\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { Project } from \"../../docs/ProjectData\";\nimport CheckGitHubRepoButton from \"./CheckGitHubRepoButton\";\n\ntype Props = {\n    isOpen: boolean;\n    onClose: () => void;\n    project: Project;\n}\n\nexport default function ProjectModal({isOpen, onClose, project}: Props) {\n\n    const description = project.description.map(d=><React.Fragment>{d}<br/><br /></React.Fragment>)\n\n    return (\n        <Modal\n            isOpen={isOpen}\n            onClose={onClose}\n            size=\"3xl\"\n        >\n            <ModalOverlay />\n            <ModalContent\n                bg=\"gray.50\"\n            >\n                <ModalHeader color=\"gray.900\">{project.title}</ModalHeader>\n                <ModalCloseButton color=\"gray.900\" />\n                <ModalBody pb={6}>\n                    <Text as=\"p\" color=\"gray.900\">{description}</Text>\n                    <CheckGitHubRepoButton repo_url={project.github_url} />\n                </ModalBody>\n            </ModalContent>\n        </Modal>\n    )\n}","import { Heading, VStack, Text, Tag, HStack, useDisclosure } from \"@chakra-ui/react\";\nimport randomColor from \"randomcolor\";\nimport { Project } from \"../../docs/ProjectData\";\nimport ProjectModal from \"./ProjectModal\";\n\nexport function ProjectCard({...project}: Project) {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n\n    const colors = randomColor({alpha: 0.5, format: 'rgba', luminosity: 'dark', count:project.tags.length})\n\n    const tagList = project.tags.map((tag)=><Tag m={3} color=\"white\" bg={colors[project.tags.indexOf(tag)]}>{tag}</Tag>)\n\n    return (\n        <>\n        <VStack\n            textAlign=\"center\"\n            p={10}\n            m={15}\n            maxW=\"400px\"\n            borderRadius=\"lg\"\n            bg=\"gray.600\"\n            color=\"white\"\n            onClick={onOpen}\n            cursor=\"pointer\"\n        >\n            <Heading size=\"lg\">{project.title}</Heading>\n            <Text>{project.short_description}</Text>\n            <HStack wrap=\"wrap\" justifyContent=\"space-around\">{tagList}</HStack>\n        </VStack>\n        <ProjectModal isOpen={isOpen} onClose={onClose} project={{...project}} />\n        </>\n    );\n}","import { Flex } from \"@chakra-ui/react\";\nimport { projectData } from \"../docs/ProjectData\";\nimport { ProjectCard } from \"./projects/ProjectCard\";\n\nexport default function Projects() {\n    const listOfProjects = projectData.map((project) => <ProjectCard {...project} />)\n\n    return (\n        <Flex\n            w=\"100%\"\n            h=\"100vh\"\n            overflow=\"scroll\"\n            bg=\"#303030\"\n            wrap=\"wrap\"\n            justify=\"space-evenly\"\n            alignContent=\"flex-start\"\n            pt=\"100px\" // the menubar is 72px in height -> 100px padding on top so that it does not overlap\n        >\n            {listOfProjects}\n        </Flex>\n    );\n}","import React from 'react';\nimport {\n  ChakraProvider,\n  theme,\n} from '@chakra-ui/react';\nimport Home from './components/Home.tsx';\nimport About from './components/About.tsx';\nimport Menubar from './components/Menubar';\nimport Experience from './components/Experience';\nimport Contact from './components/Contact';\nimport Projects from './components/Projects';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\nimport { ParallaxProvider } from 'react-scroll-parallax';\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n    <ParallaxProvider>\n      <ChakraProvider theme={theme}>\n        <Menubar />\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/experience\">\n            <Experience />\n          </Route>\n          <Route path=\"/contact\">\n            <Contact />\n          </Route>\n          <Route path=\"/projects\">\n            <Projects />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </ChakraProvider>\n      </ParallaxProvider>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}